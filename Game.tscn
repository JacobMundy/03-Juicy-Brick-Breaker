[gd_scene load_steps=25 format=2]

[ext_resource path="res://Brick/Brick_Container.gd" type="Script" id=1]
[ext_resource path="res://Paddle/Paddle.tscn" type="PackedScene" id=2]
[ext_resource path="res://Ball/Ball_Container.gd" type="Script" id=3]
[ext_resource path="res://Game.gd" type="Script" id=4]
[ext_resource path="res://UI/Pause_Menu.tscn" type="PackedScene" id=5]
[ext_resource path="res://Wall/Wall.gd" type="Script" id=6]
[ext_resource path="res://UI/HUD.tscn" type="PackedScene" id=7]
[ext_resource path="res://UI/Instructions.tscn" type="PackedScene" id=8]
[ext_resource path="res://Effects/Fever.gd" type="Script" id=9]
[ext_resource path="res://UI/Theme.tres" type="Theme" id=10]
[ext_resource path="res://Assets/brickBreak.wav" type="AudioStream" id=11]
[ext_resource path="res://Assets/Wall.wav" type="AudioStream" id=12]
[ext_resource path="res://Effects/Comet_Container.gd" type="Script" id=13]
[ext_resource path="res://Assets/Music.mp3" type="AudioStream" id=14]
[ext_resource path="res://Assets/Paddle.wav" type="AudioStream" id=15]
[ext_resource path="res://Assets/FeverMusic.mp3" type="AudioStream" id=16]
[ext_resource path="res://Effects/ColorRect.gd" type="Script" id=17]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

//uniform vec3 color_replace = vec3(1.0,1.0,0.0);
uniform int OCTAVE = 12;
uniform float timescale = 1.0;
uniform vec4 CLOUD1_COL: hint_color = vec4(0.41,0.64,0.78,0.4);
uniform vec4 CLOUD2_COL: hint_color = vec4(0.99,0.79,0.46,0.2);
uniform vec4 CLOUD3_COL: hint_color = vec4(0.81,0.31,0.59,1.0);
uniform vec4 CLOUD4_COL: hint_color = vec4(0.27,0.15,0.33,1.0);
uniform vec4 SPACE: hint_color = vec4(0.09,0.06,0.28,0.3);
uniform float zoomScale = 6.0;
uniform float size = 10.0;
uniform float starscale = 20.0;
uniform float prob: hint_range(0.0,1.0) = 0.98;

float rand(vec2 input){
	return fract(sin(dot(input,vec2(23.53,44.0)))*42350.45);
}

float perlin(vec2 input){
	vec2 i = floor(input);
	vec2 j = fract(input);
	vec2 coord = smoothstep(0.,1.,j);
	
	float a = rand(i);
	float b = rand(i+vec2(1.0,0.0));
	float c = rand(i+vec2(0.0,1.0));
	float d = rand(i+vec2(1.0,1.0));

	return mix(mix(a,b,coord.x),mix(c,d,coord.x),coord.y);
}

float fbm(vec2 input){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return value;
}

float fbmCloud(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return smoothstep(0.,1.,(smoothstep(minimum,1.,value)-minimum)/(1.0-minimum));
}

float fbmCloud2(vec2 input, float minimum){
	float value = 0.0;
	float scale = 0.5;
	
	for(int i = 0; i < OCTAVE; i++){
		value += perlin(input)*scale;
		input*=2.0;
		scale*=0.5;
	}
	return (smoothstep(minimum,1.,value)-minimum)/(1.0-minimum);
}

void fragment(){
	vec4 originalColor = texture(TEXTURE, UV);
	float timescaled = TIME * timescale;
	//vec2 zoomUV = vec2(zoomScale * UV.x + UV.x*0.04*TIME*sin(0.07*TIME), zoomScale * UV.y + UV.y*0.05*TIME*cos(0.06*TIME));
	vec2 zoomUV2 = vec2(zoomScale * UV.x + 0.03*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.03*timescaled*cos(0.06*timescaled));
	vec2 zoomUV3 = vec2(zoomScale * UV.x + 0.027*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.025*timescaled*cos(0.06*timescaled));
	vec2 zoomUV4 = vec2(zoomScale * UV.x + 0.021*timescaled*sin(0.07*timescaled), zoomScale * UV.y + 0.021*timescaled*cos(0.07*timescaled));
	float tide = 0.05*sin(TIME);
	float tide2 = 0.06*cos(0.3*TIME);
	//if(color_replace == originalColor.rgb){
		vec4 nebulaTexture = vec4(SPACE.rgb, 0.5+0.2*sin(0.23*TIME +UV.x-UV.y));
		nebulaTexture += fbmCloud2(zoomUV3, 0.24 + tide)*CLOUD1_COL;
		nebulaTexture += fbmCloud(zoomUV2*0.9, 0.33 - tide)*CLOUD2_COL;
		nebulaTexture = mix(nebulaTexture,CLOUD3_COL,fbmCloud(vec2(0.9*zoomUV4.x,0.9*zoomUV4.y), 0.25+tide2));
		nebulaTexture = mix(nebulaTexture,CLOUD4_COL,fbmCloud(zoomUV3*0.7+2.0, 0.4+tide2));
		vec2 zoomstar = starscale*zoomUV2;
		vec2 pos = floor(zoomstar / size);
		float starValue = rand(pos);
		if(starValue>prob){
			vec2 center = size * pos + vec2(size, size) * 0.5;
			float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
			float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
			nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
		} else {
			zoomstar *= 5.0;
			pos = floor(zoomstar / size);
			float starValue2 = rand(pos + vec2(13.0,13.0));
			if(starValue2 >= 0.95){
				vec2 center = size * pos + vec2(size, size) * 0.5;
				float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
				float color = 1.0 - distance(zoomstar, center) / (0.5 * size);
				nebulaTexture = mix(nebulaTexture, vec4(1.0,1.0,1.0,1.0),fbmCloud(pos,0.0)*smoothstep(0.,1.,color * t / (abs(zoomstar.y - center.y)) * t / (abs(zoomstar.x - center.x))));
			}
		}
		COLOR = vec4(nebulaTexture.rgb, 1.0);
		//COLOR = vec4(nebulaTexture.rgb,nebulaTexture.a * 1.2)
	//} else {
	//	COLOR = originalColor;
	//}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/OCTAVE = 12
shader_param/timescale = 1.0
shader_param/CLOUD1_COL = Color( 0.41, 0.64, 0.78, 0.4 )
shader_param/CLOUD2_COL = Color( 0.99, 0.79, 0.46, 0.2 )
shader_param/CLOUD3_COL = Color( 0.81, 0.31, 0.59, 1 )
shader_param/CLOUD4_COL = Color( 0.27, 0.15, 0.33, 1 )
shader_param/SPACE = Color( 0.09, 0.06, 0.28, 0.3 )
shader_param/zoomScale = 6.0
shader_param/size = 10.0
shader_param/starscale = 20.0
shader_param/prob = 0.98

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 100, 500 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 612, 100 )

[sub_resource type="Shader" id=6]
code = "// Fire shader

shader_type canvas_item;

uniform vec2 fireMovement = vec2(-0.01, -0.5);
uniform vec2 distortionMovement = vec2(-0.01, -0.3);
uniform float normalStrength = 40.0;
uniform float distortionStrength=0.1;


/** NOISE **/
float rand(vec2 co) {
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec2 hash( vec2 p ) {
	p = vec2( dot(p,vec2(127.1,311.7)),
			dot(p,vec2(269.5,183.3)) );

	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
	float K1 = 0.366025404; // (sqrt(3)-1)/2;
	float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x+p.y)*K1 );

	vec2 a = p - i + (i.x+i.y)*K2;
	vec2 o = step(a.yx,a.xy);    
	vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;

	vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

	return dot( n, vec3(70.0) );
}

float fbm ( in vec2 p ) {
	float f = 0.0;
	mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6 ));
	f  = 0.5000*noise(p); p = m*p;
	f += 0.2500*noise(p); p = m*p;
	f += 0.1250*noise(p); p = m*p;
	f += 0.0625*noise(p); p = m*p;
	f = 0.5 + 0.5 * f;
	return f;
}

/** DISTORTION **/
vec3 bumpMap(vec2 uv) { 
	vec2 iResolution = vec2(1024,600);
	vec2 s = 1. / iResolution.xy;
	float p =  fbm(uv);
	float h1 = fbm(uv + s * vec2(1., 0));
	float v1 = fbm(uv + s * vec2(0, 1.));
		 
	vec2 xy = (p - vec2(h1, v1)) * normalStrength;
	return vec3(xy + .5, 1.);
}

/** MAIN **/
void fragment() {
	float timeScale = TIME * 1.0;
	vec2 iResolution = vec2(1024,600);
	vec2 uv = FRAGCOORD.xy/iResolution.xy;

	vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);
	
	vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);
	uv += displacement; 
	
	vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;
	float n = pow(fbm(8.0 * uvT), 1.0);    
	
	float gradient = pow(1.0 - uv.y, 2.0) * 5.;
	float finalNoise = n * gradient;
	
	vec3 color = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);
	COLOR = vec4(color, 1.);
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/fireMovement = Vector2( -0.01, -0.5 )
shader_param/distortionMovement = Vector2( -0.01, -0.3 )
shader_param/normalStrength = 40.0
shader_param/distortionStrength = 0.1

[sub_resource type="Environment" id=5]
background_mode = 4
background_energy = 3.13
fog_enabled = true
fog_color = Color( 0.0509804, 0.207843, 0.364706, 1 )
fog_sun_amount = 0.14
fog_depth_enabled = false
fog_depth_begin = 0.0
fog_transmit_curve = 0.25
fog_height_curve = 1.51572
dof_blur_far_enabled = true
glow_enabled = true
glow_intensity = 5.37
glow_bloom = 0.08

[node name="Game" type="Node2D"]
script = ExtResource( 4 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 4 )
margin_right = 1022.0
margin_bottom = 836.0
color = Color( 0.333333, 0.333333, 0.333333, 1 )
script = ExtResource( 17 )

[node name="Tween" type="Tween" parent="ColorRect"]

[node name="Comet_Container" type="Node2D" parent="."]
script = ExtResource( 13 )

[node name="Wall_Container" type="Node2D" parent="."]

[node name="Wall_Left" type="StaticBody2D" parent="Wall_Container"]
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Left"]
margin_left = -190.0
margin_top = -100.0
margin_right = 10.0
margin_bottom = 900.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Left"]
position = Vector2( -90, 400 )
shape = SubResource( 1 )

[node name="Wall_Right" type="StaticBody2D" parent="Wall_Container"]
position = Vector2( 1024, 0 )
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Right"]
margin_left = -10.0
margin_top = -100.0
margin_right = 190.0
margin_bottom = 900.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Right"]
position = Vector2( 90, 400 )
shape = SubResource( 1 )

[node name="Wall_Top" type="StaticBody2D" parent="Wall_Container"]
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Top"]
margin_left = -100.0
margin_top = -190.0
margin_right = 1124.0
margin_bottom = 10.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Top"]
position = Vector2( 512, -90 )
shape = SubResource( 2 )

[node name="Brick_Container" type="Node2D" parent="."]
script = ExtResource( 1 )

[node name="Paddle_Container" type="Node2D" parent="."]

[node name="Paddle" parent="Paddle_Container" instance=ExtResource( 2 )]
position = Vector2( 462, 720 )

[node name="Ball_Container" type="Node2D" parent="."]
script = ExtResource( 3 )

[node name="Powerup_Container" type="Node2D" parent="."]

[node name="Fever" type="Node2D" parent="."]
script = ExtResource( 9 )

[node name="Timer" type="Timer" parent="Fever"]

[node name="UI" type="CanvasLayer" parent="."]

[node name="HUD" parent="UI" instance=ExtResource( 7 )]
pause_mode = 0
visible = false
material = SubResource( 7 )
theme = ExtResource( 10 )

[node name="Pause_Menu" parent="UI" instance=ExtResource( 5 )]
visible = false
theme = ExtResource( 10 )

[node name="Instructions" parent="UI" instance=ExtResource( 8 )]
pause_mode = 2
theme = ExtResource( 10 )

[node name="Brick" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 11 )

[node name="Wall" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 12 )

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 14 )
volume_db = -22.723
autoplay = true

[node name="Paddle" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 15 )

[node name="FeverMusic" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 16 )
volume_db = -15.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 5 )

[connection signal="tween_all_completed" from="ColorRect/Tween" to="ColorRect" method="_on_Tween_tween_all_completed"]
[connection signal="timeout" from="Fever/Timer" to="Fever" method="_on_Timer_timeout"]
