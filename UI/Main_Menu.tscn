[gd_scene load_steps=15 format=2]

[ext_resource path="res://UI/Main_Menu.gd" type="Script" id=1]
[ext_resource path="res://Assets/Call of Ops Duty.otf" type="DynamicFontData" id=2]
[ext_resource path="res://UI/Theme.tres" type="Theme" id=3]
[ext_resource path="res://Ball/Ball.tscn" type="PackedScene" id=4]
[ext_resource path="res://Assets/Music.mp3" type="AudioStream" id=5]
[ext_resource path="res://Assets/Wall.wav" type="AudioStream" id=6]
[ext_resource path="res://UI/StaticBody2D.gd" type="Script" id=7]

[sub_resource type="Shader" id=4]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.5
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="DynamicFont" id=6]
size = 110
font_data = ExtResource( 2 )

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 520, 8 )

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 8, 407.5 )

[sub_resource type="RectangleShape2D" id=9]
extents = Vector2( 533.5, 6 )

[sub_resource type="RectangleShape2D" id=10]
extents = Vector2( 6.5, 406.5 )

[node name="Main_Menu" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 3 )
script = ExtResource( 1 )

[node name="Ball" parent="." instance=ExtResource( 4 )]
position = Vector2( 103, 100 )
linear_velocity = Vector2( 0.222, -4.848 )

[node name="Background" type="ColorRect" parent="."]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0.501961 )

[node name="Label" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -397.0
custom_fonts/font = SubResource( 6 )
text = "Brick Breaker"
align = 1
valign = 1

[node name="Play" type="Button" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -100.0
margin_top = -20.0
margin_right = 100.0
margin_bottom = 20.0
text = "Play"

[node name="Quit" type="Button" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -100.0
margin_top = 50.0
margin_right = 100.0
margin_bottom = 90.0
text = "Quit"

[node name="StaticBody2D" type="StaticBody2D" parent="."]
script = ExtResource( 7 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 510, -2 )
shape = SubResource( 7 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( -2, 397.5 )
shape = SubResource( 8 )

[node name="CollisionShape2D3" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 510.5, 798 )
shape = SubResource( 9 )

[node name="CollisionShape2D4" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 1030.5, 396.5 )
shape = SubResource( 10 )

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -22.723
autoplay = true

[node name="Wall" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )

[connection signal="pressed" from="Play" to="." method="_on_Play_pressed"]
[connection signal="pressed" from="Quit" to="." method="_on_Quit_pressed"]
